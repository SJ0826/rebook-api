// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           BigInt     @id @default(autoincrement())
  email        String     @unique @db.VarChar(255)
  password     String     @db.VarChar(100)
  name         String     @db.VarChar(50)
  refreshToken String?
  books        Book[]     @relation("UserBooks")
  favorites    Favorite[]
  createdAt    DateTime   @default(now())

  ordersAsBuyer  Order[] @relation("BuyerOrders") // 구매자로 참여한 주문
  ordersAsSeller Order[] @relation("SellerOrders") // 판매자로 참여한 주문
}

enum BookStatus {
  NEW // 새책
  LIKE_NEW // 거의 새책
  GOOD // 양호
  ACCEPTABLE // 사용감 있음
}

model Book {
  id          BigInt     @id @unique @default(autoincrement())
  title       String
  author      String
  publisher   String
  price       Decimal
  description String?
  status      BookStatus @default(NEW)
  seller      User       @relation("UserBooks", fields: [sellerId], references: [id])
  sellerId    BigInt
  createdAt   DateTime   @default(now())
  orders      Order[]
  favorites   Favorite[]
}

enum OrderStatus {
  PENDING // 진행 중
  COMPLETED // 완료
  CANCELED // 취소
}

model Order {
  id     BigInt @id @default(autoincrement())
  book   Book   @relation(fields: [bookId], references: [id])
  bookId BigInt

  buyer   User   @relation("BuyerOrders", fields: [buyerId], references: [id])
  buyerId BigInt

  seller   User   @relation("SellerOrders", fields: [sellerId], references: [id])
  sellerId BigInt

  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
}

model Favorite {
  id        BigInt   @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    BigInt
  book      Book     @relation(fields: [bookId], references: [id])
  bookId    BigInt
  createdAt DateTime @default(now())
}
