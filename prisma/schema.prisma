// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           BigInt         @id @default(autoincrement()) @db.BigInt
  email        String         @unique @db.VarChar(255)
  password     String         @db.VarChar(100)
  name         String         @db.VarChar(50)
  refreshToken String?        @map("refresh_token") @db.VarChar(255)
  books        Book[]         @relation("UserBooks")
  favorites    Favorite[]
  createdAt    DateTime       @default(now()) @map("created_at")
  buyerOrders  Order[]        @relation("BuyerOrders") // 구매자로 참여한 주문
  sellerOrders Order[]        @relation("SellerOrders") // 판매자로 참여한 주문
  Message      Message[]
  UserChatRoom UserChatRoom[]
}

enum BookStatus {
  NEW // 새책
  LIKE_NEW // 거의 새책
  GOOD // 양호
  ACCEPTABLE // 사용감 있음
}

model Book {
  id          BigInt      @id @unique @default(autoincrement())
  title       String      @db.VarChar(255)
  author      String      @db.VarChar(100)
  publisher   String      @db.VarChar(150)
  price       BigInt
  description String?     @db.Text
  status      BookStatus  @default(NEW)
  seller      User        @relation("UserBooks", fields: [sellerId], references: [id])
  sellerId    BigInt      @map("seller_id")
  createdAt   DateTime    @default(now()) @map("created_at")
  orders      Order[]
  favorites   Favorite[]
  bookImage   BookImage[]

  @@index(fields: [title(ops: raw("gin_trgm_ops"))], type: Gin)
  @@index(fields: [author(ops: raw("gin_trgm_ops"))], type: Gin)
}

model BookImage {
  id       BigInt  @id @unique @default(autoincrement())
  book     Book?   @relation(fields: [bookId], references: [id])
  bookId   BigInt? @map("book_id")
  imageUrl String  @map("image_url") @db.VarChar(255)
  sort     Int?
  uuid     String  @unique @db.VarChar()
}

enum OrderStatus {
  PENDING // 진행 중
  COMPLETED // 완료
  CANCELED // 취소
}

model Order {
  id        BigInt      @id @default(autoincrement())
  book      Book        @relation(fields: [bookId], references: [id])
  bookId    BigInt
  buyer     User        @relation("BuyerOrders", fields: [buyerId], references: [id])
  buyerId   BigInt
  seller    User        @relation("SellerOrders", fields: [sellerId], references: [id])
  sellerId  BigInt
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
  chatRoom  ChatRoom?
}

model ChatRoom {
  id           BigInt         @id @default(autoincrement())
  order        Order          @relation(fields: [orderId], references: [id])
  orderId      BigInt         @unique @map("order_id")
  messages     Message[]
  createdAt    DateTime       @default(now()) @map("created_at")
  UserChatRoom UserChatRoom[]
}

model Message {
  id         BigInt   @id @default(autoincrement())
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
  chatRoomId BigInt   @map("chat_room_id")
  sender     User     @relation(fields: [senderId], references: [id])
  senderId   BigInt   @map("sender_id")
  content    String
  createdAt  DateTime @default(now()) @map("created_at")
}

model UserChatRoom {
  id         BigInt   @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     BigInt   @map("user_id")
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
  chatRoomId BigInt   @map("chat_room_id")
  lastReadAt DateTime @default(now()) @map("last_read_at")

  @@unique([userId, chatRoomId])
}

model Favorite {
  id        BigInt   @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    BigInt   @map("user_id") @db.BigInt
  book      Book     @relation(fields: [bookId], references: [id])
  bookId    BigInt   @map("book_id") @db.BigInt
  createdAt DateTime @default(now())
}
