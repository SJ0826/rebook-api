generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               BigInt         @id @default(autoincrement())
  email            String         @unique @db.VarChar(255)
  password         String         @db.VarChar(100)
  name             String         @db.VarChar(50)
  imageUrl         String?        @map("image_url")
  createdAt        DateTime       @default(now()) @map("created_at")
  refreshToken     String?        @map("refresh_token") @db.VarChar(255)
  emailToken       String?        @map("email_token")
  emailTokenExpiry DateTime?      @map("email_token_expiry")
  emailVerified    Boolean        @default(false) @map("email_verified")
  books            Book[]         @relation("UserBooks")
  favorites        Favorite[]
  Message          Message[]
  buyerOrders      Order[]        @relation("BuyerOrders")
  sellerOrders     Order[]        @relation("SellerOrders")
  UserChatRoom     UserChatRoom[]
}

model Book {
  id          BigInt         @id @unique @default(autoincrement())
  title       String         @db.VarChar(255)
  author      String         @db.VarChar(100)
  publisher   String         @db.VarChar(150)
  price       BigInt
  status      BookStatus     @default(NEW)
  description String?
  createdAt   DateTime       @default(now()) @map("created_at")
  sellerId    BigInt         @map("seller_id")
  saleStatus  BookSaleStatus @default(FOR_SALE) @map("sale_status")
  seller      User           @relation("UserBooks", fields: [sellerId], references: [id])
  bookImage   BookImage[]
  favorites   Favorite[]
  orders      Order[]

  @@index([title(ops: raw("gin_trgm_ops"))], type: Gin)
  @@index([author(ops: raw("gin_trgm_ops"))], type: Gin)
}

model BookImage {
  id       BigInt  @id @unique @default(autoincrement())
  bookId   BigInt? @map("book_id")
  imageUrl String  @map("image_url") @db.VarChar(255)
  uuid     String  @unique @db.VarChar
  sort     Int?
  book     Book?   @relation(fields: [bookId], references: [id])
}

model Order {
  id        BigInt      @id @default(autoincrement())
  bookId    BigInt
  buyerId   BigInt
  sellerId  BigInt
  createdAt DateTime    @default(now())
  status    OrderStatus @default(PENDING)
  chatRoom  ChatRoom?
  book      Book        @relation(fields: [bookId], references: [id])
  buyer     User        @relation("BuyerOrders", fields: [buyerId], references: [id])
  seller    User        @relation("SellerOrders", fields: [sellerId], references: [id])
}

model ChatRoom {
  id           BigInt         @id @default(autoincrement())
  orderId      BigInt         @unique @map("order_id")
  createdAt    DateTime       @default(now()) @map("created_at")
  order        Order          @relation(fields: [orderId], references: [id])
  messages     Message[]
  UserChatRoom UserChatRoom[]
}

model Message {
  id         BigInt   @id @default(autoincrement())
  senderId   BigInt   @map("sender_id")
  content    String
  createdAt  DateTime @default(now()) @map("created_at")
  chatRoomId BigInt   @map("chat_room_id")
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
  sender     User     @relation(fields: [senderId], references: [id])
}

model UserChatRoom {
  id         BigInt   @id @default(autoincrement())
  userId     BigInt   @map("user_id")
  chatRoomId BigInt   @map("chat_room_id")
  lastReadAt DateTime @default(now()) @map("last_read_at")
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@unique([userId, chatRoomId])
}

model Favorite {
  id        BigInt   @id @default(autoincrement())
  createdAt DateTime @default(now())
  bookId    BigInt   @map("book_id")
  userId    BigInt   @map("user_id")
  book      Book     @relation(fields: [bookId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

enum BookStatus {
  NEW
  LIKE_NEW
  GOOD
  ACCEPTABLE
}

enum BookSaleStatus {
  FOR_SALE
  SOLD
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELED
}
